version: 2 # use CircleCI 2.0

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      - image: circleci/php:7.2-apache-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment:
          APP_ENV: production
          APP_DEBUG: true
          APP_KEY: kjcndjjksddwdwdw
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: webform
          DB_USERNAME: root
          DB_PASSWORD: 1234
          CACHE_DRIVER: file
          QUEUE_DRIVER: sync
          SENTRY_DSN: https://b53658ff4ec749719da39905217d41e0@sentry.io/1366253
      - image: circleci/mysql:5.6-ram
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: '1234'
          MYSQL_DATABASE: webform
    working_directory: /home/circleci/project # directory where steps will run
    steps: # a set of executable commands
      - checkout # special step to check out source code to working directory
      - run: sudo a2enmod rewrite
      - run: sudo docker-php-ext-install mysqli pdo_mysql
      - run:
          name: Install Project Dependencies
          command: composer install -n --prefer-dist
      - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
          keys:
            - composer-v2-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
            - composer-v2-
      - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
          key: composer-v2-{{ checksum "composer.lock" }}
          paths:
            - vendor
      - run:
          name: Update Missed Dependencies
          command: composer update
      - run: php artisan migrate:refresh --force
      - run: php artisan db:seed --force
      - run: ./vendor/bin/codecept run
      - run:
          name: Configure & start Apache
          command: sudo cp /home/circleci/project/docker/conf/circleci-default.conf /etc/apache2/sites-available/000-default.conf && sudo service apache2 start
      # end to end testing
      - run:
          name: install nvm
          command: curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
      - run:
          name: activate nvm
          command: |
            # Activate nvm
            export NVM_DIR=$HOME/.nvm
            touch $HOME/.nvmrc
            source $NVM_DIR/nvm.sh
            # Use node 11.0.0
            nvm install 11.0.0 && nvm alias default 11.0.0
            echo 11.0.0 > $HOME/.nvmrc
            # Enable nvm in following steps
            echo '[ -s "$HOME/.bashrc" ] && \. "$HOME/.bashrc"' >> $HOME/.bash_profile
            npm install codeceptjs puppeteer
            export NPX_HOME=$HOME/.nvm/versions/node/v11.0.0/bin
            chmod -R 777 storage #apache needs to write to logs
            cp .env.example .env
            cd tests/frontend
            $HOME/.nvm/versions/node/v11.0.0/bin/npx codeceptjs run
      - run:
          name: CSS compilation requirements
          command: npm install laravel-mix cross-env node-sass acorn --save-dev
      - run: npm run dev
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
